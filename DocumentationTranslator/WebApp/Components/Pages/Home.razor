@page "/"
@using System.Text.Json
@inject NavigationManager NavigationManager
@rendermode InteractiveServer
@attribute [StreamRendering]

<PageTitle>DONDE ESTA LA BIBLIOTECA!!!</PageTitle>

<button @onclick="TogglePopup">Open Popup</button>

<div class="mainDiv">
	<div class="inputDiv">
		<div class="smallContainer">
			<h2>Upload content!</h2>

			<label for="docName">Document name:</label>
			<input type="text" id="docName" name="docName" @bind-value="documentName">

			<label for="inputLanguage"> Select input langauge:</label>
			<select id="inputLanguage" name="inputLanguage">
				<option value="1">One</option>
				<option value="2">Two</option>
				<option value="3">Three</option>
			</select>

			<label for="outputLanguage"> Select output langauge:</label>
			<select id="outputLanguage" name="outputLanguage">
				<option value="1">One</option>
				<option value="2">Two</option>
				<option value="3">Three</option>
			</select>

			<p></p>
			<button @onclick="UploadDocument">Upload!</button>
		</div>

		<div class="smallContainer">
			<h2>View a file!</h2>
			<label> Select the file you want to view:</label>
			<select name="userFile">
				<option value="1">One</option>
				<option value="2">Two</option>
				<option value="3">Three</option>
			</select>
			<button>View file</button>
		</div>
	</div>

	<div class="viewDiv">
		<h4>File Content:</h4>
		<textarea class="inputContent" @bind="fileContent" @bind:event="oninput"/>
	</div>
</div>

@if(showPopup)
{
	<div class="popup-overlay" @onclick="ClosePopup">
		<div class="popup">
			<div class="popup-content">
				<p>@this.messageInfo</p>
			</div>
		</div>
	</div>
}


@code {
	bool showPopup = false;

	void TogglePopup()
	{
		showPopup = !showPopup;
	}

	void ClosePopup()
	{
		showPopup = false;
	}



	private string? fileContent { get; set; } = "qwerty";
	private string? documentName;
	private string messageInfo = "Provide valid input";


	protected void OnInitialised()
	{
		messageInfo = "Provide valid input";
	}

	private async Task HandleFileSelected(InputFileChangeEventArgs e)
	{
		try
		{
			var file = e.GetMultipleFiles().FirstOrDefault();
			if(file != null)
			{
				var fileStream = file.OpenReadStream();
				using var reader = new StreamReader(fileStream);
				var contents = await reader.ReadToEndAsync();

				// Update UI using InvokeAsync
				await InvokeAsync(() =>
				{
					fileContent = contents;
				});
				Console.WriteLine("Filename: " + file.Name);
				return;
			}
		}
		catch(Exception exception)
		{
			Console.WriteLine("Exception info: " + exception.Message);
		}
	}

	private void UploadDocument()
	{
		if(fileContent == "qwerty")
		{
			Console.WriteLine("Musat first upload a doc!!!");
			return;
		}
		else
		{
			Console.WriteLine("Call API here tp upload the doc");
		}
	}
}